# Generated by Django 5.2 on 2025-06-22 21:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('excel_data', '0007_alter_employeeprofile_basic_salary_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='PayrollPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.IntegerField()),
                ('month', models.CharField(max_length=20)),
                ('data_source', models.CharField(choices=[('UPLOADED', 'Uploaded Data'), ('FRONTEND', 'Frontend Tracked'), ('HYBRID', 'Mixed Sources')], default='FRONTEND', max_length=20)),
                ('is_locked', models.BooleanField(default=False, help_text='Locked periods cannot be modified')),
                ('calculation_date', models.DateTimeField(auto_now_add=True)),
                ('working_days_in_month', models.IntegerField(default=25)),
                ('tds_rate', models.DecimalField(decimal_places=2, default=5.0, help_text='TDS percentage', max_digits=5)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='excel_data.tenant')),
            ],
            options={
                'ordering': ['-year', '-month'],
                'unique_together': {('tenant', 'year', 'month')},
            },
        ),
        migrations.CreateModel(
            name='CalculatedSalary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee_id', models.CharField(db_index=True, max_length=50)),
                ('employee_name', models.CharField(max_length=255)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('basic_salary', models.DecimalField(decimal_places=2, max_digits=12)),
                ('basic_salary_per_hour', models.DecimalField(decimal_places=2, max_digits=10)),
                ('basic_salary_per_minute', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_working_days', models.IntegerField(default=0)),
                ('present_days', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('absent_days', models.DecimalField(decimal_places=1, default=0, max_digits=5)),
                ('ot_hours', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('late_minutes', models.IntegerField(default=0)),
                ('salary_for_present_days', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('ot_charges', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('late_deduction', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('incentive', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('gross_salary', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('tds_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('salary_after_tds', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_advance_balance', models.DecimalField(decimal_places=2, default=0, help_text='Total pending advance', max_digits=12)),
                ('advance_deduction_amount', models.DecimalField(decimal_places=2, default=0, help_text='Amount to deduct this month', max_digits=12)),
                ('advance_deduction_editable', models.BooleanField(default=True, help_text='Admin can modify deduction amount')),
                ('remaining_advance_balance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('net_payable', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('data_source', models.CharField(choices=[('UPLOADED', 'Uploaded Data'), ('FRONTEND', 'Frontend Tracked'), ('HYBRID', 'Mixed Sources')], default='FRONTEND', max_length=20)),
                ('calculation_timestamp', models.DateTimeField(auto_now=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='excel_data.tenant')),
                ('payroll_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calculated_salaries', to='excel_data.payrollperiod')),
            ],
            options={
                'ordering': ['-payroll_period__year', '-payroll_period__month', 'employee_name'],
                'unique_together': {('tenant', 'payroll_period', 'employee_id')},
            },
        ),
        migrations.CreateModel(
            name='SalaryAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('adjustment_type', models.CharField(choices=[('INCENTIVE', 'Incentive'), ('DEDUCTION', 'Deduction'), ('ADVANCE_OVERRIDE', 'Advance Deduction Override'), ('BONUS', 'Bonus'), ('PENALTY', 'Penalty')], max_length=50)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('reason', models.TextField()),
                ('created_by', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('calculated_salary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adjustments', to='excel_data.calculatedsalary')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='excel_data.tenant')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
